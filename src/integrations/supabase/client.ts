// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://yvtjimbvpuclcgvnmvyh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl2dGppbWJ2cHVjbGNndm5tdnloIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwMDYzMTksImV4cCI6MjA1NzU4MjMxOX0.VnjEht3dkgBV94NbyISAabrRq4tyW04X8fZ_dvdNBrM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Service functions for SPACE system

// Project Services
export const getProjects = async () => {
  const { data, error } = await supabase
    .from('projects')
    .select('*')
    .order('created_at', { ascending: false });
    
  if (error) throw error;
  return data;
};

export const getProject = async (id: string) => {
  const { data, error } = await supabase
    .from('projects')
    .select('*')
    .eq('id', id)
    .single();
    
  if (error) throw error;
  return data;
};

export const createProject = async (project: { name: string; description?: string; user_id: string }) => {
  const { data, error } = await supabase
    .from('projects')
    .insert(project)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

// Goal Services
export const getGoals = async (projectId: string) => {
  const { data, error } = await supabase
    .from('goals')
    .select('*')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false });
    
  if (error) throw error;
  return data;
};

export const createGoal = async (goal: { 
  project_id: string; 
  title: string; 
  description?: string;
  status?: string;
  priority?: string;
  due_date?: string;
}) => {
  const { data, error } = await supabase
    .from('goals')
    .insert(goal)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

export const updateGoal = async (id: string, updates: {
  title?: string;
  description?: string;
  status?: string;
  priority?: string;
  due_date?: string;
}) => {
  const { data, error } = await supabase
    .from('goals')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

// Resource Services
export const getResources = async (projectId: string) => {
  const { data, error } = await supabase
    .from('resources')
    .select('*')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false });
    
  if (error) throw error;
  return data;
};

export const createResource = async (resource: {
  project_id: string;
  name: string;
  type: string;
  quantity?: number;
  availability?: string;
  allocation_details?: string;
}) => {
  const { data, error } = await supabase
    .from('resources')
    .insert(resource)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

// Timeline Services
export const getTimelineEvents = async (projectId: string) => {
  const { data, error } = await supabase
    .from('timeline_events')
    .select('*')
    .eq('project_id', projectId)
    .order('start_date', { ascending: true });
    
  if (error) throw error;
  return data;
};

export const createTimelineEvent = async (event: {
  project_id: string;
  title: string;
  description?: string;
  start_date: string;
  end_date: string;
  status?: string;
}) => {
  const { data, error } = await supabase
    .from('timeline_events')
    .insert(event)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

// Metrics Services
export const getMetrics = async (projectId: string) => {
  const { data, error } = await supabase
    .from('metrics')
    .select('*')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false });
    
  if (error) throw error;
  return data;
};

export const createMetric = async (metric: {
  project_id: string;
  name: string;
  description?: string;
  target?: number;
  current_value?: number;
  unit?: string;
}) => {
  const { data, error } = await supabase
    .from('metrics')
    .insert(metric)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

export const updateMetric = async (id: string, updates: {
  name?: string;
  description?: string;
  target?: number;
  current_value?: number;
  unit?: string;
}) => {
  const { data, error } = await supabase
    .from('metrics')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

// AI Suggestions Services
export const getAiSuggestions = async (projectId: string) => {
  const { data, error } = await supabase
    .from('ai_suggestions')
    .select('*')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false });
    
  if (error) throw error;
  return data;
};

export const markSuggestionImplemented = async (id: string, isImplemented: boolean = true) => {
  const { data, error } = await supabase
    .from('ai_suggestions')
    .update({ is_implemented: isImplemented })
    .eq('id', id)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

// Trigger scheduled tasks manually (for demonstration purposes)
export const generateInsights = async () => {
  const { data, error } = await supabase
    .rpc('generate_project_insights');
    
  if (error) throw error;
  return data;
};

export const updateMetricsFromGoals = async () => {
  const { data, error } = await supabase
    .rpc('update_metrics_from_goals');
    
  if (error) throw error;
  return data;
};

// Task Management Services
export const getTasks = async (projectId: string) => {
  const { data, error } = await supabase
    .from('tasks')
    .select('*')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false });
    
  if (error) throw error;
  return data || [];
};

export const createTask = async (task: {
  project_id: string;
  title: string;
  description?: string;
  status?: string;
  priority?: string;
  due_date?: string | null;
  assigned_to?: string | null;
}) => {
  const { data, error } = await supabase
    .from('tasks')
    .insert(task)
    .select()
    .single();
    
  if (error) {
    // For testing purposes, return mock data if table doesn't exist
    if (error.code === "42P01") { // relation "tasks" does not exist
      console.warn("Tasks table doesn't exist, returning mock data");
      return {
        id: `mock-${Date.now()}`,
        ...task,
        created_at: new Date().toISOString()
      };
    }
    throw error;
  }
  return data;
};

export const updateTaskStatus = async (taskId: string, status: string) => {
  const { data, error } = await supabase
    .from('tasks')
    .update({ status })
    .eq('id', taskId)
    .select()
    .single();
    
  if (error) {
    // For testing purposes, return mock data if table doesn't exist
    if (error.code === "42P01") { // relation "tasks" does not exist
      console.warn("Tasks table doesn't exist, returning mock data");
      return {
        id: taskId,
        status,
        updated_at: new Date().toISOString()
      };
    }
    throw error;
  }
  return data;
};

// Efficiency Analysis Services
export const getProjectEfficiency = async (projectId: string) => {
  // In a real implementation, this would call the database
  // For now, return mock data for demonstration
  return {
    completionRate: 78,
    resourceUtilization: 85,
    avgTaskDuration: 3.5
  };
};

export const getTasksCompletionRate = async (projectId: string) => {
  // In a real implementation, this would calculate from tasks table
  // For now, return mock data for demonstration
  return {
    rate: 78,
    total: 50,
    completed: 39
  };
};

// Alert System Services
export const getProjectAlerts = async (projectId: string) => {
  const { data, error } = await supabase
    .from('alerts')
    .select('*')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false });
    
  if (error) {
    // For testing purposes, return mock data if table doesn't exist
    if (error.code === "42P01") { // relation "alerts" does not exist
      console.warn("Alerts table doesn't exist, returning mock data");
      // Return an empty array - the component will generate mock data
      return [];
    }
    throw error;
  }
  return data || [];
};

export const dismissAlert = async (alertId: string) => {
  const { data, error } = await supabase
    .from('alerts')
    .update({ is_read: true })
    .eq('id', alertId)
    .select()
    .single();
    
  if (error) {
    // For testing purposes, return mock data if table doesn't exist
    if (error.code === "42P01") { // relation "alerts" does not exist
      console.warn("Alerts table doesn't exist, returning mock data");
      return {
        id: alertId,
        is_read: true,
        updated_at: new Date().toISOString()
      };
    }
    throw error;
  }
  return data;
};

// Task Prioritization Services
export const getPrioritizedTasks = async (projectId: string) => {
  const { data, error } = await supabase
    .from('prioritized_tasks')
    .select('*')
    .eq('project_id', projectId)
    .order('priority_score', { ascending: false });
    
  if (error) {
    // For testing purposes, return mock data if table doesn't exist
    if (error.code === "42P01") { // relation "prioritized_tasks" does not exist
      console.warn("Prioritized tasks table doesn't exist, returning mock data");
      // Return an empty array - the component will generate mock data
      return [];
    }
    throw error;
  }
  return data || [];
};

export const setPriorityFactors = async (projectId: string, factors: {
  deadline: number;
  impact: number;
  effort: number;
  complexity: number;
  dependencies: number;
}) => {
  // In a real implementation, this would update the priority factors in the database
  // For now, just log and return mock success data
  console.log('Setting priority factors for project', projectId, factors);
  return {
    success: true,
    projectId,
    factors
  };
};
