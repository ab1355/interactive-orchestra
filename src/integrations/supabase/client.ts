
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://yvtjimbvpuclcgvnmvyh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl2dGppbWJ2cHVjbGNndm5tdnloIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwMDYzMTksImV4cCI6MjA1NzU4MjMxOX0.VnjEht3dkgBV94NbyISAabrRq4tyW04X8fZ_dvdNBrM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Service functions for SPACE system

// Project Services
export const getProjects = async () => {
  const { data, error } = await supabase
    .from('projects')
    .select('*')
    .order('created_at', { ascending: false });
    
  if (error) throw error;
  return data;
};

export const getProject = async (id: string) => {
  const { data, error } = await supabase
    .from('projects')
    .select('*')
    .eq('id', id)
    .single();
    
  if (error) throw error;
  return data;
};

export const createProject = async (project: { name: string; description?: string }) => {
  const { data, error } = await supabase
    .from('projects')
    .insert(project)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

// Goal Services
export const getGoals = async (projectId: string) => {
  const { data, error } = await supabase
    .from('goals')
    .select('*')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false });
    
  if (error) throw error;
  return data;
};

export const createGoal = async (goal: { 
  project_id: string; 
  title: string; 
  description?: string;
  status?: string;
  priority?: string;
  due_date?: string;
}) => {
  const { data, error } = await supabase
    .from('goals')
    .insert(goal)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

export const updateGoal = async (id: string, updates: {
  title?: string;
  description?: string;
  status?: string;
  priority?: string;
  due_date?: string;
}) => {
  const { data, error } = await supabase
    .from('goals')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

// Resource Services
export const getResources = async (projectId: string) => {
  const { data, error } = await supabase
    .from('resources')
    .select('*')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false });
    
  if (error) throw error;
  return data;
};

export const createResource = async (resource: {
  project_id: string;
  name: string;
  type: string;
  quantity?: number;
  availability?: string;
  allocation_details?: string;
}) => {
  const { data, error } = await supabase
    .from('resources')
    .insert(resource)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

// Timeline Services
export const getTimelineEvents = async (projectId: string) => {
  const { data, error } = await supabase
    .from('timeline_events')
    .select('*')
    .eq('project_id', projectId)
    .order('start_date', { ascending: true });
    
  if (error) throw error;
  return data;
};

export const createTimelineEvent = async (event: {
  project_id: string;
  title: string;
  description?: string;
  start_date: string;
  end_date: string;
  status?: string;
}) => {
  const { data, error } = await supabase
    .from('timeline_events')
    .insert(event)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

// Metrics Services
export const getMetrics = async (projectId: string) => {
  const { data, error } = await supabase
    .from('metrics')
    .select('*')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false });
    
  if (error) throw error;
  return data;
};

export const createMetric = async (metric: {
  project_id: string;
  name: string;
  description?: string;
  target?: number;
  current_value?: number;
  unit?: string;
}) => {
  const { data, error } = await supabase
    .from('metrics')
    .insert(metric)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

export const updateMetric = async (id: string, updates: {
  name?: string;
  description?: string;
  target?: number;
  current_value?: number;
  unit?: string;
}) => {
  const { data, error } = await supabase
    .from('metrics')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

// AI Suggestions Services
export const getAiSuggestions = async (projectId: string) => {
  const { data, error } = await supabase
    .from('ai_suggestions')
    .select('*')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false });
    
  if (error) throw error;
  return data;
};

export const markSuggestionImplemented = async (id: string, isImplemented: boolean = true) => {
  const { data, error } = await supabase
    .from('ai_suggestions')
    .update({ is_implemented: isImplemented })
    .eq('id', id)
    .select()
    .single();
    
  if (error) throw error;
  return data;
};

// Trigger scheduled tasks manually (for demonstration purposes)
export const generateInsights = async () => {
  const { data, error } = await supabase
    .rpc('generate_project_insights');
    
  if (error) throw error;
  return data;
};

export const updateMetricsFromGoals = async () => {
  const { data, error } = await supabase
    .rpc('update_metrics_from_goals');
    
  if (error) throw error;
  return data;
};
